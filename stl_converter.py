'''
STL File Converter
ASCII <-> Bin
'''
import struct
import tkinter as tk
from tkinter import Tk, filedialog
import time

def choose_addr():
    '''
    Choose Save Location
    '''
    if save_addr.get():
        save_addr.set(filedialog.askopenfilename(initialdir=save_addr.get()))
    else:
        save_addr.set(filedialog.askopenfilename(initialdir='D:\\'))
    label20 = tk.Label(my_window, textvariable=save_addr)
    label20.place(rely=0.5,relwidth=0.5)
    print('Chosen File:', save_addr.get())

def convert_bin_to_ascii():
    '''
    Convert Binary STLs into a lengthier, readable ASCII STLs
    General Binary STL is structured as:
    |{header} - 80 Bytes
    |{#Triangles} - 4 Bytes
    |{Triangle Vertex #1} - 12 Bytes
    |{Triangle Vertex #2} - 12 Bytes
    |{Triangle Vertex #3} - 12 Bytes
    |{Random Stuff} - 2 Bytes
    size = 84 + 50 * (#triangles) Bytes
    '''
    name = save_addr.get().split('/')[-1][:-4]
    file_name.set(filedialog.asksaveasfilename(initialfile=name+'_ascii.stl'))
    start_time = time.time()
    normals = []
    tria_verts = []
    header = ''
    num_trias = 0
    with open(save_addr.get(), 'rb') as bin_stl:
        header = bin_stl.read(80)
        bin_stl.read(4)

        while True:
            tria_deets = bin_stl.read(50)
            if tria_deets:
                num_trias += 1
                norm_comps = []
                norm_comps.append(struct.unpack('<f', tria_deets[:4])[0])
                norm_comps.append(struct.unpack('<f', tria_deets[4:8])[0])
                norm_comps.append(struct.unpack('<f', tria_deets[8:12])[0])
                normals.append(norm_comps)

                verts = []
                verts.append(struct.unpack('<f', tria_deets[12:16])[0])
                verts.append(struct.unpack('<f', tria_deets[16:20])[0])
                verts.append(struct.unpack('<f', tria_deets[20:24])[0])
                tria_verts.append(verts)

                verts = []
                verts.append(struct.unpack('<f', tria_deets[24:28])[0])
                verts.append(struct.unpack('<f', tria_deets[28:32])[0])
                verts.append(struct.unpack('<f', tria_deets[32:36])[0])
                tria_verts.append(verts)

                verts = []
                verts.append(struct.unpack('<f', tria_deets[36:40])[0])
                verts.append(struct.unpack('<f', tria_deets[40:44])[0])
                verts.append(struct.unpack('<f', tria_deets[44:48])[0])
                tria_verts.append(verts)
            else:
                break

    with open(file_name.get(), 'w',encoding='utf8') as ascii_stl:
        ascii_stl.write('solid ' + 'Generated by Vihang\'s STL Converter' + '\n')
        for i in range(num_trias):
            # Put in the normal's components
            ascii_stl.write('    facet normal')
            for j in range(3):
                ascii_stl.write(' ' + str(normals[i][j]))
            ascii_stl.write('\n')
            # Put in the vertices' coordinates
            ascii_stl.write('        outer loop\n')
            for j in range(3):
                ascii_stl.write('            vertex')
                for k in range(3):
                    ascii_stl.write(' ' + str(tria_verts[3*i+j][k]))
                ascii_stl.write('\n')
            ascii_stl.write('        endloop\n    endfacet\n')
        ascii_stl.write('endsolid')

    end_time = time.time()
    t=end_time-start_time
    time_taken = f'Total time take to convert: {t:.4f}s'
    label22 = tk.Label(my_window, text=time_taken)
    label22.place(relx=0.5,rely=0.3,anchor=tk.CENTER,relwidth=0.5)

    my_window.configure(bg='#00cc00')

    label21 = tk.Label(my_window, textvariable=file_name)
    label21.place(relx=0.5,rely=0.5,relwidth=0.5)
    
def convert_ascii_to_bin():
    '''
    Convert a HUGE ASCII STL into a small concise Binary STL
    General ASCII STL is structured as:
    |solid header
    |   facet normal 0. 0. 0.
    |       outer loop
    |           vertex 0. 0. 0.
    |           vertex 0. 0. 0.
    |           vertex 0. 0. 0.
    |       endloop
    |   endfacet
    |endsolid
    '''
    name = save_addr.get().split('/')[-1][:-4]
    file_name.set(filedialog.asksaveasfilename(initialfile=name+'_bin.stl'))
    start_time = time.time()
    stl_contents = []
    with open(save_addr.get(), 'r',encoding='utf8') as ascii_stl:
        for lines in ascii_stl:
            stl_contents.append(lines)

    list_iter = iter(stl_contents)

    normals = []
    tria_verts = []
    facet_count = 0

    # Skip header: [{solid}{space}{random name/comments or whatever}]
    next(list_iter)
    while True:
        item = next(list_iter)
        # Check if not end of file - [{endsolid}]
        if item[:8] == 'endsolid':
            break
        # Get - [{tab}{facet}{space}{normal}{space}{x}{space}{y}{space}{z}{\n}]
        normal = item.lstrip()[13:-1]
        components = normal.split(' ')
        normals.append([float(x) for x in components])
        # Skip - [{tabx2}{outer}{space}{loop}{\n}]
        next(list_iter)
        # Get - [{tabx3}{vertex}{space}{x}{space}{y}{space}{z}{\n}]
        verts = []
        vertex = next(list_iter).lstrip()[7:-1]
        vertices = vertex.split(' ')
        verts.append([float(x) for x in vertices])
        # Get - vertex
        vertex = next(list_iter).lstrip()[7:-1]
        vertices = vertex.split(' ')
        verts.append([float(x) for x in vertices])
        # Get - vertex
        vertex = next(list_iter).lstrip()[7:-1]
        vertices = vertex.split(' ')
        verts.append([float(x) for x in vertices])
        tria_verts.append(verts)
        # Skip - [{tabx2}{endloop}]
        next(list_iter)
        # Skip - [{tab}{endfacet}]
        next(list_iter)
        # Add to the facet count
        facet_count += 1

    title_str = 'Generated by Vihang\'s STL Converter'
    with open(file_name.get(), 'w',encoding="utf8") as f:
        f.write(title_str)
    empty = b'\x51'
    with open(file_name.get(), 'ab') as bin_stl:
        #header
        # f.write(title_str)
        bin_stl.write(empty * (79-len(title_str)))
        bin_stl.write(b'\x0c')
        #Num Tria
        bin_stl.write(struct.pack('@L', int(len(normals))))
        for i in range(facet_count):
            for comp in normals[i]:
                bin_stl.write(struct.pack('<f', float(comp)))
            for vertex in tria_verts[i]:
                for coord in vertex:
                    bin_stl.write(struct.pack('<f', float(coord)))
            bin_stl.write(struct.pack('@h', 0))

    end_time = time.time()
    t=end_time-start_time
    time_taken = f'Total time take to convert: {t:.4f}s'
    label22 = tk.Label(my_window, text=time_taken)
    label22.place(relx=0.5,rely=0.3,anchor=tk.CENTER,relwidth=0.5)

    my_window.configure(bg='#00cc00')

    label21 = tk.Label(my_window, textvariable=file_name)
    label21.place(relx=0.5,rely=0.5,relwidth=0.5)

my_window = Tk()

leny = my_window.winfo_screenheight()
bg_color = '#8bc7f7'

my_window.title('STL Converter')
my_window.configure(bg=bg_color)
my_window.geometry(f'{500}x{200}+{600}+{int((leny-500)/2-50)}')
my_window.resizable(width=False, height=False)

save_addr = tk.StringVar()
file_name = tk.StringVar()

name_label = tk.Label(my_window, text='Vihang\'s STL Converter',font=("Times New Roman", 25, "bold"),fg='red')

button1 = tk.Button(my_window,text='Choose File to Convert',command=choose_addr)
button2 = tk.Button(my_window,text='ASCII -> Binary',command=convert_ascii_to_bin)
button3 = tk.Button(my_window,text='Binary -> ASCII',command=convert_bin_to_ascii)

name_label.place(relx=0.5,rely=0.1,anchor=tk.CENTER,relheight=0.2)
button1.place(rely=0.7,relwidth=1.0,anchor=tk.W,relheight=0.2)
button2.place(relx=0.,rely=0.9,relwidth=0.5,anchor=tk.W,relheight=0.2)
button3.place(relx=0.5,rely=0.9,relwidth=0.5,anchor=tk.W,relheight=0.2)

my_window.mainloop()
